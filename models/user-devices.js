// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const UserDevices = sequelize.define(
    "userDevices",
    {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
      },
      deviceName: {
        type: DataTypes.STRING,
      },
      deviceType: {
        type: DataTypes.STRING,
      },
      osVersion: {
        type: DataTypes.STRING,
      },
      deviceUniqueId: {
        type: DataTypes.STRING,
      },
      accessCodeHash: {
        type: DataTypes.STRING,
      },
      authorizationStatus: {
        type: DataTypes.ENUM(["AUTHORIZED", "PENDING", "REVOKED_BY_USER"]),
      },
      authorizationCode: {
        type: DataTypes.UUID,
      },
      authCodeExpirationDate: {
        type: DataTypes.DATE,
      },
      createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP(0)"),
      },
    },
    {
      tableName: "user_devices",
      underscored: true,
      timestamps: false,
      schema: process.env.DATABASE_SCHEMA,
    }
  );

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  UserDevices.associate = (models) => {
    UserDevices.belongsTo(models.users, {
      foreignKey: {
        name: "userIdKey",
        field: "user_id",
      },
      targetKey: "id",
      as: "user",
    });
  };
  UserDevices.beforeBulkCreate(async () => {
    throw new Error("This is currently not allowed by the UpSignOn team.");
  });
  UserDevices.beforeBulkUpdate(async () => {
    throw new Error("This is currently not allowed by the UpSignOn team.");
  });
  UserDevices.beforeCreate(async () => {
    throw new Error("This is currently not allowed by the UpSignOn team.");
  });

  const authorizeOnlyDeviceNameEdition = (userDevice) => {
    const authorizedFields = ["deviceName"];
    const changedFields = Object.keys(userDevice._changed);
    changedFields.forEach((f) => {
      if (!authorizedFields.includes(f)) throw new Error("Only device_name can be edited on a user device.");
    });
  };
  UserDevices.beforeUpdate(authorizeOnlyDeviceNameEdition);
  UserDevices.beforeSave(authorizeOnlyDeviceNameEdition);
  UserDevices.beforeUpsert(async () => {
    throw new Error("This is currently not allowed by the UpSignOn team.");
  });

  return UserDevices;
};
