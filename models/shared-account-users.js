// This model was generated by Lumber. However, you remain in control of your models.

const { upsignonError } = require("../helpers/preventCRUD");

// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const SharedAccountUsers = sequelize.define(
    "sharedAccountUsers",
    {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
      },
      sharedAccountId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      userId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      isManager: {
        type: DataTypes.BOOLEAN,
      },
      encryptedPassword: {
        type: DataTypes.STRING,
      },
      createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP(0)"),
      },
    },
    {
      tableName: "shared_account_users",
      underscored: true,
      timestamps: false,
      schema: process.env.DATABASE_SCHEMA,
    }
  );

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  SharedAccountUsers.associate = (models) => {
    SharedAccountUsers.belongsTo(models.sharedAccounts, {
      foreignKey: {
        name: "sharedAccountIdKey",
        field: "shared_account_id",
      },
      as: "sharedAccount",
    });
    SharedAccountUsers.belongsTo(models.users, {
      foreignKey: {
        name: "userIdKey",
        field: "user_id",
      },
      as: "user",
    });
  };

  const authorizeOnlyManagerEdition = (instance) => {
    const authorizedFields = ["isManager"];
    const changedFields = Object.keys(instance._changed);
    changedFields.forEach((f) => {
      if (!authorizedFields.includes(f)) throw new Error("Only isManager can be edited.");
    });
  };
  SharedAccountUsers.beforeBulkCreate(upsignonError);
  // SharedAccountUsers.beforeBulkDestroy(upsignonError);
  // SharedAccountUsers.beforeBulkUpdate(upsignonError);
  SharedAccountUsers.beforeCreate(upsignonError);
  // SharedAccountUsers.beforeDestroy(upsignonError);
  SharedAccountUsers.beforeUpdate(authorizeOnlyManagerEdition);
  SharedAccountUsers.beforeSave(authorizeOnlyManagerEdition);
  SharedAccountUsers.beforeUpsert(upsignonError);

  return SharedAccountUsers;
};
